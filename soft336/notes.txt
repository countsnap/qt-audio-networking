allows for conference calling on a LAN, allowing all participents to hear and talk.

allows for volume control of both input and output.

Participants, can choose whether to talk or listen (or both).

uses high quality audio sampled at cd quality.

uses low level audio reading and writing in pull mode (lower latency).

multithreaded network and audio code.

achieves almost real-time communciation.

uses compression to send and receieve the audio data.

makes good use of the object hierarchy in QT, i.e. when the server or client is deleted, the associated audio
objects are deleted automatically.

well modularized code, split up into seperate classes etc.

makes use of the a custom build model for storing clients ip addresses (using mode based list view).

auto displays all clients on the list.

allows users to select whether they want to broadcast or listen.

solution loosely based on the audio examples provided by QT, networking based off official documentation.
model is based from the model view tutorial.

uses QTs datastream to serialise the audio information. (based from the QDataStream tutorial).

Phonon was considered, but deemed inappropriate (not very cross comptiable), and instead uses QTMultimedia librarys.

caveats
=======

makes use of zlib for compression, could have made use of vorbis etc.

using both TCP and UDP caused some network issues (assumed blocking?) - solution to use multithreading?

would have more appropriate to use RTP to stream data, but could not find any appropriate plugins to accomplish this.

makes use of network manager as a quick way to get the server IP address. Upon reading about this class, it would
have made more sense to use this for the client and server functionality, as it asyncochronous by default (it was unclear
whether the instances of UDP client, etc. where asyncochronous or not; the community/documentation was not consistent in this regard).

to-do
=====

add better buffering
add multithreading, and some usage of TCP????
in client view, add option to view who is broadcasting, and who is listening VIA TCP!!
sync transmission information?
take another look at QLIST<T>
add a lot of error checking
write documentation, using doxygen.

--find out why get address is being called so many times
--control string server needs to have 1 thread per client??
--add table header

***clientlist needs a look at***

