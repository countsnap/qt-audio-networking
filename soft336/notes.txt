allows for conference calling on a LAN, allowing all participents to hear and talk.

Participants, can choose whether to talk or listen (or both).

uses high quality audio sampled at cd quality.

uses low level audio reading and writing.

achieves almost real-time communciation.

uses compression to send and receieve the audio data.

makes good use of the object hierarchy in QT, i.e. when the server or client is deleted, the associated audio
objects are deleted automatically.

makes use of the a custom build model for storing clients ip addresses (using mode based list view).

auto displays all clients on the list.

allows users to select whether they want to broadcast or listen.

solution loosely based on the audio examples provided by QT.

uses QTs datastream to serialise the audio information

caveats
=======

makes use of zlib for compression, could have made use of vorbis etc.

using both TCP and UDP caused some network issues (assumed blocking?) - solution to use multithreading?

would have more appropriate to use RTP to stream data, but could not find any appropriate plugins to accomplish this.

to-do
=====
add better buffering

add volume control

add a lot of error checking

---- in client view, add option to view who is broadcasting, and who is listening ----

sync transmission information

add port constants IE UDP_PORT = 8002, TCP_PORT = 8003
also for buffers, bitrates, etc.?

take another look at QLIST<T>?
